/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : convert-certificate
 #	author : miyako
 #	2017/03/15
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void OnStartup(){
	OpenSSL_add_all_algorithms();//for PEM_From_P12
}

bool IsProcessOnExit(){
	C_TEXT name;
	PA_long32 state, time;
	PA_GetProcessInfo(PA_GetCurrentProcessNumber(), name, &state, &time);
	CUTF16String procName(name.getUTF16StringPtr());
	CUTF16String exitProcName((PA_Unichar *)"$\0x\0x\0\0\0");
	return (!procName.compare(exitProcName));
}

void OnCloseProcess(){
	if(IsProcessOnExit()){
		EVP_cleanup();
	}
}

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
		case kInitPlugin :
		case kServerInitPlugin :
			OnStartup();
			break;

		case kCloseProcess :
			OnCloseProcess();
			break;
			
// --- Convert

		case 1 :
			P12_TO_PEM(pResult, pParams);
			break;

	}
}

// ------------------------------------ Convert -----------------------------------


void P12_TO_PEM(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_BLOB Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_TEXT Param4;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	BIO *bio = BIO_new_mem_buf((void *)Param1.getBytesPtr(), Param1.getBytesLength());
	if(bio)
	{
		PKCS12 *p12 = d2i_PKCS12_bio(bio, NULL);
		if(p12)
		{
			EVP_PKEY *key = NULL;
			X509 *cert = NULL;
			STACK_OF(X509) *ca = NULL;
			CUTF8String pass;
			Param2.copyUTF8String(&pass);
			if(PKCS12_parse(p12, (const char *)pass.c_str(), &key, &cert, &ca))
			{
				BIO *x509 = BIO_new(BIO_s_mem());
				if(x509)
				{
					if(PEM_write_bio_X509(x509, cert))
					{
						char *buf = NULL;
						int len = BIO_get_mem_data(x509, &buf);
						if(len)
						{
							CUTF8String x509Str = CUTF8String((const uint8_t *)buf, len);
							Param3.setUTF8String(&x509Str);
						}
					}
					BIO_free(x509);
				}
				BIO *pem = BIO_new(BIO_s_mem());
				if(pem)
				{
					if(PEM_write_bio_RSAPrivateKey(pem, EVP_PKEY_get1_RSA(key), NULL, NULL, NULL, NULL, (void *)pass.c_str()))
					{
						char *buf = NULL;
						int len = BIO_get_mem_data(pem, &buf);
						if(len)
						{
							CUTF8String pemStr = CUTF8String((const uint8_t *)buf, len);
							Param4.setUTF8String(&pemStr);
						}
					}
					BIO_free(pem);
				}
			}
		}
		BIO_free(bio);
	}//bio
	
	Param3.toParamAtIndex(pParams, 3);
	Param4.toParamAtIndex(pParams, 4);
}

